import os
import logging
import re
import time
import threading
import schedule
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import requests
from bs4 import BeautifulSoup
from collections import Counter, defaultdict
import warnings
from scipy import stats
import math
from urllib.parse import urljoin, urlparse
from queue import Queue
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler

# Configure logging
LOG_FILE = 'bot_log.txt'
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
warnings.filterwarnings('ignore')

# Set default paths
DATA_FILE = 'game_data.csv'
MODEL_UPDATE_INTERVAL_MINUTES = 10
WEB_DATA_FILE = 'web_data.txt'

# Global application object
application = None

# --- Helper Functions ---

def create_feedback_keyboard(prediction_id):
    """Create an inline keyboard for feedback."""
    keyboard = [
        [
            InlineKeyboardButton("Correct", callback_data=f"feedback_correct_{prediction_id}"),
            InlineKeyboardButton("Incorrect", callback_data=f"feedback_incorrect_{prediction_id}"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- Handler Functions ---

async def start(update: Update, context: CallbackContext):
    """Handles the /start command"""
    try:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Bot d·ª± ƒëo√°n game ƒë√£ s·∫µn s√†ng. S·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
    except Exception as e:
        logging.error(f"Error in start handler: {str(e)}")

async def help(update: Update, context: CallbackContext):
    """Handles the /help command"""
    try:
        help_text = """
C√°c l·ªánh c√≥ s·∫µn:
/predict - D·ª± ƒëo√°n k·∫øt qu·∫£ ti·∫øp theo
/stats - Xem th·ªëng k√™ chi ti·∫øt
/pattern - Ph√¢n t√≠ch m·∫´u
/trend - Xem xu h∆∞·ªõng hi·ªán t·∫°i
/analyze - Ph√¢n t√≠ch to√†n di·ªán
/history - Xem l·ªãch s·ª≠ d·ª± ƒëo√°n
/accuracy - Xem ƒë·ªô ch√≠nh x√°c
/url <web_url> <selector> - Thu th·∫≠p d·ªØ li·ªáu t·ª´ trang web
/tx <number> <number> <number> - Nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng (c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng)
            """
        await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)
    except Exception as e:
        logging.error(f"Error in help handler: {str(e)}")

async def handle_tx(update: Update, context: CallbackContext):
    """Handles the /tx command to input historical data"""
    try:
         parts = update.message.text.split(' ', 1)
         if len(parts) < 2:
               await context.bot.send_message(chat_id=update.effective_chat.id, text="Vui l√≤ng cung c·∫•p c√°c s·ªë c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng sau l·ªánh /tx")
               return
         numbers_text = parts[1].strip()
         numbers = []
         for num_str in numbers_text.split():
             if num_str.isdigit():
                 numbers.append(int(num_str))
             else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="Vui l√≤ng ch·ªâ nh·∫≠p c√°c s·ªë h·ª£p l·ªá. D·ªØ li·ªáu b·ªã b·ªè qua")
                return
         if numbers:
            for number in numbers:
               predictor.record_game_result(number)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"ƒê√£ ghi nh·∫≠n {len(numbers)} s·ªë: {numbers}")
         else:
              await context.bot.send_message(chat_id=update.effective_chat.id, text=f"Kh√¥ng t√¨m th·∫•y s·ªë n√†o")

    except Exception as e:
            logging.error(f"Error in handle_tx: {str(e)}")
            await context.bot.send_message(chat_id=update.effective_chat.id, text="L·ªói x·ª≠ l√Ω l·ªánh /tx. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o")

async def handle_url(update: Update, context: CallbackContext):
    """Handles the /url command"""
    try:
         parts = update.message.text.split(' ', 2)
         if len(parts) < 3:
              await context.bot.send_message(chat_id=update.effective_chat.id, text="Vui l√≤ng cung c·∫•p URL v√† CSS selector. V√≠ d·ª•: `/url <url> <css selector>`")
              return
         url, selector = parts[1], parts[2]
         await context.bot.send_message(chat_id=update.effective_chat.id, text=f"ƒêang thu th·∫≠p d·ªØ li·ªáu t·ª´ {url} s·ª≠ d·ª•ng selector `{selector}`...")
         await predictor.collect_data_from_url(url, selector, update, context)

    except IndexError:
         await context.bot.send_message(chat_id=update.effective_chat.id, text="Vui l√≤ng cung c·∫•p m·ªôt URL h·ª£p l·ªá v√† selector sau l·ªánh /url.")
    except Exception as e:
        logging.error(f"Error in handle_url: {str(e)}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh URL: {e}")


async def handle_stats(update: Update, context: CallbackContext):
    """Handles the /stats command to show simple statistics"""
    try:
       if not predictor.historical_data.empty:
         total_count = len(predictor.historical_data)
         correct_count = len(predictor.historical_data[predictor.historical_data['feedback'] == 'correct'])
         incorrect_count = len(predictor.historical_data[predictor.historical_data['feedback'] == 'incorrect'])

         stats_text = f"""
üìä Th·ªëng k√™ d·ªØ li·ªáu:
T·ªïng s·ªë l∆∞·ª£ng d·ª± ƒëo√°n: {total_count}
S·ªë d·ª± ƒëo√°n ch√≠nh x√°c: {correct_count}
S·ªë d·ª± ƒëo√°n kh√¥ng ch√≠nh x√°c: {incorrect_count}
"""
         await context.bot.send_message(chat_id=update.effective_chat.id, text=stats_text)
       else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™.")
    except Exception as e:
        logging.error(f"Error in handle_stats: {str(e)}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã th·ªëng k√™")


async def handle_history(update: Update, context: CallbackContext):
    """Handles the /history command"""
    try:
      if not predictor.historical_data.empty:
           history = predictor.historical_data.tail(10).to_string()
           await context.bot.send_message(chat_id=update.effective_chat.id, text=f"L·ªãch s·ª≠ d·ªØ li·ªáu g·∫ßn nh·∫•t (10):\n {history}")
      else:
           await context.bot.send_message(chat_id=update.effective_chat.id, text="Kh√¥ng c√≥ l·ªãch s·ª≠ d·ª± ƒëo√°n ƒë·ªÉ hi·ªÉn th·ªã.")
    except Exception as e:
        logging.error(f"Error in handle_history: {str(e)}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="L·ªói hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n.")

async def handle_prediction(update: Update, context: CallbackContext):
    """Handles the /predict command"""
    try:
        if len(predictor.historical_data) < 10:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="C·∫ßn √≠t nh·∫•t 10 s·ªë ƒë·ªÉ d·ª± ƒëo√°n ch√≠nh x√°c.")
            return

        numbers = predictor.historical_data['result'].tolist()
        # T·ªïng h·ª£p c√°c ph∆∞∆°ng ph√°p d·ª± ƒëo√°n
        math_pred = predictor.mathematical_prediction(numbers)
        stat_analysis = predictor.statistical_analysis(numbers)
        ml_pred = predictor.machine_learning_prediction(numbers)
        patterns = predictor.pattern_analysis(numbers)
        evolution_result = predictor.evolutionary_algorithm(numbers)
        opportunities = predictor.opportunity_analysis(numbers)

        # Create report
        report = f"""
üìä B√°o c√°o d·ª± ƒëo√°n:

1. Ph√¢n t√≠ch to√°n h·ªçc:
- Trung b√¨nh: {math_pred['basic_stats']['mean']:.2f}
- ƒê·ªô l·ªách chu·∫©n: {math_pred['basic_stats']['std']:.2f}
- Kho·∫£ng tin c·∫≠y: [{math_pred['confidence_interval'][0]:.2f}, {math_pred['confidence_interval'][1]:.2f}]

2. Ph√¢n t√≠ch th·ªëng k√™:
- Xu h∆∞·ªõng: {stat_analysis['trend_analysis']['trend_direction']}
- ƒê·ªô m·∫°nh xu h∆∞·ªõng: {stat_analysis['trend_analysis']['trend_strength']:.2f}

3. D·ª± ƒëo√°n m√°y h·ªçc:
- Ensemble: {ml_pred['ensemble_prediction']:.2f}
- ƒê·ªô tin c·∫≠y: {ml_pred['confidence']['confidence_score']:.2f}

4. M·∫´u ph·ªï bi·∫øn:
{patterns['repeating_patterns']}

5. C∆° h·ªôi:
- ƒêi·ªÉm c∆° h·ªôi: {opportunities['opportunity_score']:.2f}/100
- Xu h∆∞·ªõng: {opportunities['current_trend']['direction']}
- ƒê·ªô m·∫°nh: {opportunities['current_trend']['strength']:.2f}

üéØ D·ª± ƒëo√°n cu·ªëi c√πng: {ml_pred['ensemble_prediction']:.2f}
‚ö†Ô∏è ƒê·ªô tin c·∫≠y: {ml_pred['confidence']['confidence_score']*100:.2f}%
        """

        prediction_id = len(predictor.historical_data)
        keyboard = create_feedback_keyboard(prediction_id)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=report, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"Error in handle_prediction: {str(e)}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh d·ª± ƒëo√°n.")

async def handle_feedback(update: Update, context: CallbackContext):
    """Handles feedback from the buttons."""
    try:
        query = update.callback_query
        await query.answer()

        feedback_data = query.data.split('_') # feedback_correct_{prediction_id} or feedback_incorrect_{prediction_id}
        feedback_type = feedback_data[1]
        prediction_id = int(feedback_data[2])

        if prediction_id < len(predictor.historical_data):
            predictor.record_feedback(prediction_id, feedback_type)
            await query.edit_message_text(text=f"ƒê√£ nh·∫≠n ph·∫£n h·ªìi: {feedback_type} cho d·ª± ƒëo√°n {prediction_id}")
            if feedback_type == "correct":
                 predictor.update_models() # Update if the model is correct
        else:
             await query.edit_message_text(text="D·ª± ƒëo√°n kh√¥ng h·ª£p l·ªá. C√≥ th·ªÉ ƒë√£ b·ªã xo√°.")
    except Exception as e:
         logging.error(f"Error in handle_feedback: {str(e)}")
         await query.edit_message_text(text="L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.")


class GamePredictor:
    def __init__(self, bot_token):
         self.application = ApplicationBuilder().token(bot_token).build()
         self.game_data = []
         self.historical_data = pd.DataFrame()
         self.models = {
            'lr': LinearRegression(),
            'rf': RandomForestRegressor(),
            'svr': SVR(kernel='rbf')
         }
         self.scaler = StandardScaler()
         self.load_game_data()

    def start_bot(self):
        self.schedule_data_collection()
        self.schedule_model_updates()
        self.application.add_handler(CallbackQueryHandler(handle_feedback))
        self.application.run_polling() # Use global application object

    def load_game_data(self):
        """Load game data from CSV file"""
        try:
            if os.path.exists(DATA_FILE):
                self.historical_data = pd.read_csv(DATA_FILE, parse_dates=['timestamp'])
                logging.info(f"Loaded {len(self.historical_data)} records from {DATA_FILE}")
            else:
                logging.info(f"{DATA_FILE} not found, starting with empty data.")
        except Exception as e:
            logging.error(f"Error loading game data: {str(e)}")

    def save_game_data(self):
        """Save game data to CSV file"""
        try:
            self.historical_data.to_csv(DATA_FILE, index=False)
            logging.info(f"Saved {len(self.historical_data)} records to {DATA_FILE}")
        except Exception as e:
            logging.error(f"Error saving game data: {str(e)}")

    def collect_data(self):
       """Scheduled data collection (example: random number between 1 and 6)"""
       # Generate a random game result
       new_result = np.random.randint(1, 7) # simulate a dice roll
       self.record_game_result(new_result)

    def record_game_result(self, result):
        """Record a single game result to the data"""
        timestamp = datetime.now()
        new_data = pd.DataFrame({'result': [result], 'timestamp': [timestamp]})
        self.historical_data = pd.concat([self.historical_data, new_data], ignore_index=True) # Add data
        self.save_game_data() # Save to file
        logging.info(f"Recorded game result: {result} at {timestamp}")

    def record_feedback(self, prediction_id, feedback_type):
       """Record feedback for a specific prediction"""
       try:
          self.historical_data.loc[prediction_id, 'feedback'] = feedback_type
          self.save_game_data()
          logging.info(f"Recorded feedback: {feedback_type} for prediction {prediction_id}")
       except Exception as e:
            logging.error(f"Error recording feedback: {str(e)}")

    async def collect_data_from_url(self, url, selector, update: Update, context: CallbackContext):
        """Thu th·∫≠p v√† x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ URL"""
        try:
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')

            # Attempt to get data using user selector
            elements = soup.select(selector)

            if elements:
                logging.info(f"Found data with user-provided selector '{selector}' on {url}")
            else:
                # Fallback with some common CSS selector if user specified selector fail to get data
                common_selectors = [
                    'span.bet-history__item-result', # for https://68gb2025.ink/?code=10853170
                    'p', 'span', 'div', 'li', '.result', '#result',
                    '.text-result', 'div.item-session.has-result .text',
                     '.history__item .result', 'div[class*="bet-history-"] .value-result',
                ]

                for sel in common_selectors:
                     elements = soup.select(sel)
                     if elements:
                         selector = sel
                         logging.warning(f"Could not find data with '{selector}', using fallback selector '{sel}' on {url}")
                         break
                else: # If no common selectors work
                    logging.error(f"Could not find data using any selector on {url}")
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tr√™n {url} v·ªõi selector ƒë√£ cho, ho·∫∑c selector m·∫∑c ƒë·ªãnh.")
                    return


            text_data = ' '.join([el.get_text().strip() for el in elements]) #Extract numbers from text
            numbers = self.extract_numbers_from_text(text_data)

            # Record valid numbers
            if numbers:
               for number in numbers:
                   self.record_game_result(number)
               logging.info(f"Extracted number from web: {numbers}")
            else:
               logging.warning(f"No numbers found on {url}")
               await context.bot.send_message(chat_id=update.effective_chat.id, text=f"Kh√¥ng c√≥ s·ªë n√†o ƒë∆∞·ª£c t√¨m th·∫•y tr√™n {url}")
        except requests.exceptions.RequestException as e:
                logging.error(f"Error fetching URL {url}: {str(e)}")
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"L·ªói khi truy c·∫≠p URL: {str(e)}")
        except Exception as e:
             logging.error(f"Error collecting data from {url}: {str(e)}")
             await context.bot.send_message(chat_id=update.effective_chat.id, text=f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")


    def extract_numbers_from_text(self, text):
        """Extract numbers from text using regular expression"""
        try:
            numbers = re.findall(r'\b\d+\b', text)  # Find whole number (e.g., prevent getting 23 in 123)
            return [int(num) for num in numbers]
        except Exception as e:
            logging.error(f"Error extracting numbers: {str(e)}")
            return []

    def schedule_data_collection(self):
        """L√™n l·ªãch thu th·∫≠p d·ªØ li·ªáu m·ªói 1 ph√∫t"""
        def run_schedule():
            while True:
                schedule.run_pending()
                time.sleep(1)

        schedule.every(1).minutes.do(self.collect_data)
        threading.Thread(target=run_schedule).start()

    def schedule_model_updates(self):
       """L√™n l·ªãch c·∫≠p nh·∫≠t models"""
       def run_model_updates():
           while True:
               schedule.run_pending()
               time.sleep(1)

       schedule.every(MODEL_UPDATE_INTERVAL_MINUTES).minutes.do(self.update_models)
       threading.Thread(target=run_model_updates).start()

    def update_models(self):
        """C·∫≠p nh·∫≠t c√°c model ML"""
        try:
            if len(self.historical_data) < 10:
                logging.info("Not enough data to train models.")
                return

            # Filter for correct feedback
            correct_data = self.historical_data[self.historical_data['feedback'] == 'correct']
            if len(correct_data) < 5: # At least 5 examples before we update
                logging.info("Not enough 'correct' feedback to train models.")
                return

            X = self.prepare_features(correct_data)
            y = correct_data['result'].values

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # C·∫≠p nh·∫≠t c√°c model
            self.models['lr'].fit(X_train, y_train)
            self.models['rf'].fit(X_train, y_train)
            self.models['svr'].fit(X_train, y_train)

            logging.info("Models updated successfully")

        except Exception as e:
            logging.error(f"Model update error: {str(e)}")

    def prepare_features(self, df):
        """Chu·∫©n b·ªã features cho ML"""
        df = df.copy()

        # T·∫°o features
        df['hour'] = df['timestamp'].dt.hour
        df['day_of_week'] = df['timestamp'].dt.dayofweek
        df['rolling_mean'] = df['result'].rolling(window=5).mean()
        df['rolling_std'] = df['result'].rolling(window=5).std()

        # One-hot encoding cho categorical features
        features = pd.get_dummies(df[['hour', 'day_of_week']])
        features = features.join(df[['rolling_mean', 'rolling_std']])

        # Fill any remaining NaN with 0
        features.fillna(0, inplace=True)

        return self.scaler.fit_transform(features)

    def mathematical_prediction(self, numbers):
        """1. T√≠nh to√°n to√°n h·ªçc n√¢ng cao"""
        results = {
            'basic_stats': {
                'mean': np.mean(numbers),
                'median': np.median(numbers),
                'std': np.std(numbers),
                'variance': np.var(numbers)
            },
            'distribution': {
                'skewness': stats.skew(numbers),
                'kurtosis': stats.kurtosis(numbers)
            },
            'probability': self.calculate_probability(numbers),
            'confidence_interval': stats.t.interval(alpha=0.95, df=len(numbers)-1,
                                                 loc=np.mean(numbers),
                                                 scale=stats.sem(numbers))
        }
        return results

    def calculate_probability(self, numbers):
        """T√≠nh x√°c su·∫•t chi ti·∫øt"""
        total = len(numbers)
        counter = Counter(numbers)
        basic_prob = {num: count/total for num, count in counter.items()}

        # T√≠nh x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán
        conditional_prob = defaultdict(dict)
        for i in range(len(numbers)-1):
            current = numbers[i]
            next_num = numbers[i+1]
            if current not in conditional_prob:
                conditional_prob[current] = defaultdict(int)
            conditional_prob[current][next_num] += 1

        # Chu·∫©n h√≥a x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán
        for current in conditional_prob:
            total = sum(conditional_prob[current].values())
            for next_num in conditional_prob[current]:
                conditional_prob[current][next_num] /= total

        return {
            'basic_probability': basic_prob,
            'conditional_probability': dict(conditional_prob)
        }

    def statistical_analysis(self, numbers):
        """2. Ph√¢n t√≠ch th·ªëng k√™ n√¢ng cao"""
        analysis = {
            'descriptive_stats': pd.Series(numbers).describe().to_dict(),
            'quartiles': {
                'Q1': np.percentile(numbers, 25),
                'Q2': np.percentile(numbers, 50),
                'Q3': np.percentile(numbers, 75),
                'IQR': np.percentile(numbers, 75) - np.percentile(numbers, 25)
            },
            'distribution_tests': {
                'normality': stats.normaltest(numbers),
                'uniformity': stats.kstest(numbers, 'uniform')
            },
            'trend_analysis': self.analyze_trend(numbers)
        }
        return analysis

    def analyze_trend(self, numbers):
        """Ph√¢n t√≠ch xu h∆∞·ªõng"""
        diff = np.diff(numbers)
        return {
            'trend_direction': 'increasing' if np.mean(diff) > 0 else 'decreasing',
            'trend_strength': abs(np.mean(diff)),
            'volatility': np.std(diff),
            'momentum': sum(1 for x in diff if x > 0) / len(diff)
        }

    def machine_learning_prediction(self, numbers):
        """3. D·ª± ƒëo√°n m√°y h·ªçc n√¢ng cao"""
        if len(numbers) < 10:
            return None

        # Chu·∫©n b·ªã data
        X = np.array([numbers[i:i+5] for i in range(len(numbers)-5)])
        y = np.array(numbers[5:])

        # Train multiple models
        predictions = {}
        for name, model in self.models.items():
            model.fit(X, y)
            pred = model.predict([numbers[-5:]])[0]
            predictions[name] = pred

        # Ensemble prediction
        ensemble_pred = np.mean(list(predictions.values()))

        return {
            'individual_predictions': predictions,
            'ensemble_prediction': ensemble_pred,
            'confidence': self.calculate_prediction_confidence(predictions)
        }

    def calculate_prediction_confidence(self, predictions):
        """T√≠nh ƒë·ªô tin c·∫≠y c·ªßa d·ª± ƒëo√°n"""
        values = list(predictions.values())
        return {
            'std_dev': np.std(values),
            'range': max(values) - min(values),
            'confidence_score': 1 / (1 + np.std(values))
        }

    def pattern_analysis(self, numbers):
        """6. Ph√¢n t√≠ch m·∫´u n√¢ng cao"""
        patterns = {
            'sequences': self.find_sequences(numbers),
            'repeating_patterns': self.find_repeating_patterns(numbers),
            'cycle_analysis': self.analyze_cycles(numbers)
        }
        return patterns

    def find_sequences(self, numbers):
        """T√¨m c√°c chu·ªói s·ªë"""
        sequences = []
        current_seq = [numbers[0]]

        for i in range(1, len(numbers)):
            if numbers[i] == numbers[i-1] + 1:
                current_seq.append(numbers[i])
            else:
                if len(current_seq) > 1:
                    sequences.append(current_seq)
                current_seq = [numbers[i]]

        return sequences

    def find_repeating_patterns(self, numbers):
        """T√¨m m·∫´u l·∫∑p l·∫°i"""
        patterns = {}
        for length in range(2, 6):
            for i in range(len(numbers) - length):
                pattern = tuple(numbers[i:i+length])
                if pattern in patterns:
                    patterns[pattern] += 1
                else:
                    patterns[pattern] = 1

        return dict(sorted(patterns.items(), key=lambda x: x[1], reverse=True)[:5])

    def analyze_cycles(self, numbers):
        """Ph√¢n t√≠ch chu k·ª≥"""
        fft = np.fft.fft(numbers)
        frequencies = np.fft.fftfreq(len(numbers))
        dominant_cycles = sorted([(abs(fft[i]), 1/abs(freq))
                                for i, freq in enumerate(frequencies)
                                if freq > 0], reverse=True)[:3]
        return dominant_cycles

    def evolutionary_algorithm(self, numbers):
        """9. Thu·∫≠t to√°n ti·∫øn h√≥a n√¢ng cao"""
        class Individual:
            def __init__(self, genes):
                self.genes = genes
                self.fitness = 0

            def calculate_fitness(self, target):
                self.fitness = -abs(sum(self.genes) - target)
                return self.fitness

        class Population:
            def __init__(self, size, gene_length):
                self.individuals = [Individual(np.random.randint(0, 10, gene_length))
                                  for _ in range(size)]

            def evolve(self, generations, target):
                for gen in range(generations):
                    # T√≠nh fitness
                    for ind in self.individuals:
                        ind.calculate_fitness(target)

                    # S·∫Øp x·∫øp theo fitness
                    self.individuals.sort(key=lambda x: x.fitness, reverse=True)

                    # Ch·ªçn l·ªçc
                    next_gen = self.individuals[:len(self.individuals)//2]

                    # Lai gh√©p
                    while len(next_gen) < len(self.individuals):
                        parent1, parent2 = np.random.choice(next_gen, 2)
                        crossover_point = np.random.randint(0, len(parent1.genes))
                        child_genes = np.concatenate([parent1.genes[:crossover_point],
                                                    parent2.genes[crossover_point:]])
                        next_gen.append(Individual(child_genes))

                    # ƒê·ªôt bi·∫øn
                    for ind in next_gen[1:]:
                        if np.random.random() < 0.1:
                            mutation_point = np.random.randint(0, len(ind.genes))
                            ind.genes[mutation_point] = np.random.randint(0, 10)

                    self.individuals = next_gen

                return self.individuals[0]

        # S·ª≠ d·ª•ng thu·∫≠t to√°n ti·∫øn h√≥a
        target_sum = sum(numbers[-5:])
        pop = Population(size=50, gene_length=5)
        best_individual = pop.evolve(generations=100, target=target_sum)

        return {
            'predicted_sequence': best_individual.genes.tolist(),
            'fitness': best_individual.fitness,
            'target_sum': target_sum
        }

    def opportunity_analysis(self, numbers):
        """10. Ph√¢n t√≠ch c∆° h·ªôi n√¢ng cao"""
        analysis = {
            'current_trend': self.analyze_current_trend(numbers),
            'momentum_indicators': self.calculate_momentum(numbers),
            'volatility_analysis': self.analyze_volatility(numbers),
            'opportunity_score': self.calculate_opportunity_score(numbers)
        }
        return analysis

    def analyze_current_trend(self, numbers):
        """Ph√¢n t√≠ch xu h∆∞·ªõng hi·ªán t·∫°i"""
        if len(numbers) < 2:
            return None

        recent_numbers = numbers[-10:]
        trend = {
            'direction': 'up' if recent_numbers[-1] > recent_numbers[0] else 'down',
            'strength': abs(recent_numbers[-1] - recent_numbers[0]),
            'consistency': sum(1 for i in range(1, len(recent_numbers))
                             if (recent_numbers[i] - recent_numbers[i-1] > 0) ==
                                (recent_numbers[-1] > recent_numbers[0])) / (len(recent_numbers)-1)
        }
        return trend

    def calculate_momentum(self, numbers):
        """T√≠nh momentum"""
        return {
            'roc': (numbers[-1] - numbers[0]) / numbers[0] if numbers[0] != 0 else 0,
            'acceleration': np.diff(np.diff(numbers)).mean(),
            'moving_average': pd.Series(numbers).rolling(window=5).mean().iloc[-1]
        }

    def analyze_volatility(self, numbers):
        """Ph√¢n t√≠ch bi·∫øn ƒë·ªông"""
        returns = np.diff(numbers) / numbers[:-1]
        return {
            'historical_volatility': np.std(returns) * np.sqrt(252),
            'average_true_range': sum(abs(high - low)
                                    for high, low in zip(numbers[1:], numbers[:-1])) / (len(numbers)-1)
        }

    def calculate_opportunity_score(self, numbers):
        """T√≠nh ƒëi·ªÉm c∆° h·ªôi"""
        trend = self.analyze_current_trend(numbers)
        momentum = self.calculate_momentum(numbers)
        volatility = self.analyze_volatility(numbers)

        score = 0
        if trend['direction'] == 'up':
            score += trend['strength'] * trend['consistency']
        score += momentum['roc'] * 100
        score -= volatility['historical_volatility']

        return max(min(score, 100), 0)  # Normalize to 0-100


def main():
    """Main entry point for the bot"""
    global application
    bot_token = os.environ.get("BOT_TOKEN")  # Get the bot token from environment variable
    if not bot_token:
       logging.error("Bot token not found. Make sure to set the BOT_TOKEN environment variable.")
       return

    predictor = GamePredictor(bot_token)
    application = predictor.application # set the application globally

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("url", handle_url))
    application.add_handler(CommandHandler("predict", handle_prediction))
    application.add_handler(CommandHandler("tx", handle_tx))
    application.add_handler(CommandHandler("stats", handle_stats))
    application.add_handler(CommandHandler("history", handle_history))


    logging.info("Bot is starting...")  # Notify that the bot is starting
    predictor.start_bot()  # Start the bot
    logging.info("Bot has started successfully.")

if __name__ == "__main__":
    main()